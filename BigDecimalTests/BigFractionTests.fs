namespace BigMath.Tests

module BigFractionTest =

    open NUnit.Framework
    open FsUnit
    open BigMath

    [<Test>]
    let ``Sanity check`` ( ) = ( 2 + 2 ) |> should equal 4

    // Basic fraction arithmetic
    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``1/2 + 1/2`` ( ) =
        BigFraction( 1, 2 ) + BigFraction( 1, 2 ) |> should equal ( BigFraction( 2, 2 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``2/4 - 1/4`` ( ) =
        BigFraction( 2, 4 ) - BigFraction( 1, 4 ) |> should equal ( BigFraction( 1, 4 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``1/2 * 1/2`` ( ) =
        BigFraction( 1, 2 ) * BigFraction( 1, 2 ) |> should equal ( BigFraction( 1, 4 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``1/2 / 1/2`` ( ) =
        BigFraction( 1, 2 ) / BigFraction( 1, 2 ) |> should equal ( BigFraction( 2, 2 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``1/3 + 2`` ( ) =
        BigFraction( 1, 3 ) + 2I |> should equal ( BigFraction( 7, 3 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``2/4 - 1`` ( ) =
        BigFraction( 2, 4 ) - 1I |> should equal ( BigFraction( -2, 4 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``1/2 * 2`` ( ) =
        BigFraction( 1, 2 ) * 2I |> should equal ( BigFraction( 2, 2 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``1/2 / 2`` ( ) =
        BigFraction( 1, 2 ) / 2I |> should equal ( BigFraction( 1, 4 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``7/3 / 0`` ( ) =
        ( fun ( ) -> BigFraction( 7, 3 ) / 0I |> ignore ) |> should ( throwWithMessage "Cannot divide by 0." ) typeof<System.DivideByZeroException>

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``3 + 1/2`` ( ) =
        3I + BigFraction( 1, 2 ) |> should equal ( BigFraction( 7, 2 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``4 - 1/4`` ( ) =
        4I - BigFraction( 1, 4 ) |> should equal ( BigFraction( 15, 4 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``2 * 1/2`` ( ) =
        2I * BigFraction( 1, 2 ) |> should equal ( BigFraction( 2, 2 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``2 / 1/2`` ( ) =
        2I / BigFraction( 1, 2 ) |> should equal ( BigFraction( 4, 1 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``-( 1/2 )`` ( ) =
        -BigFraction( 1, 2 ) |> should equal ( BigFraction( -1, -2 ) )

    [<Test>][<CategoryAttribute( "Basic Fraction Arithmetic" )>]
    let ``0 / 5/2`` ( ) =
        ( fun ( ) -> 0I / BigFraction( 5, 2 ) |> ignore ) |> should ( throwWithMessage "Cannot divide by 0." ) typeof<System.DivideByZeroException>

    // Big fraction arithmetic
    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``791309280198335168041641561809412053315930982888704277232210694549371163955070107824406671377681/860217306537929529285571697052287117633568412594579835307424875064088618985175577609382527926577 + 154529387916899705987152446246653089086657622083458520816510877570986709260364866788788066413836/847888326996192017652150344860391665634162039854309961029889510055257927613958407683597041691104`` ( ) =
        BigFraction( 791309280198335168041641561809412053315930982888704277232210694549371163955070107824406671377681I, 860217306537929529285571697052287117633568412594579835307424875064088618985175577609382527926577I ) +
        BigFraction( 154529387916899705987152446246653089086657622083458520816510877570986709260364866788788066413836I, 847888326996192017652150344860391665634162039854309961029889510055257927613958407683597041691104I )
            |> should equal (
                BigFraction( 803870755578757679904792170656010709640254595524352605762782878817423372697931634362638582533159460579234045583488013537030117722236904085196429593859120291677214707544988483121962914826769196I, 729368212893615538311229680063085089277167652595862154493147329212712739973121167774048441006576738260639826586625338123686191014961201624372812888382377151207966979683760198701605038826071008I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``760296505554853157507705765375752941157052266322391701406831713956948105975644982031520423055688/867897646255878983754679108991684409575440076347547741339083453285285686955700204870293443898708 - 641017529660065833888109803857034717174872770464371155816076737642112685472308499560269783538157/288404058239972491018470215806415240112289684085197446465128813796162582028013952888852438246633`` ( ) =
        BigFraction( 760296505554853157507705765375752941157052266322391701406831713956948105975644982031520423055688I, 867897646255878983754679108991684409575440076347547741339083453285285686955700204870293443898708I ) -
        BigFraction( 641017529660065833888109803857034717174872770464371155816076737642112685472308499560269783538157I, 288404058239972491018470215806415240112289684085197446465128813796162582028013952888852438246633I )
            |> should equal (
                BigFraction( -337065007533039792924898246692123672704461821376027282405879147254260011867041712844394741371090292435774920410319034434102227406662580691099820770217202721055465311880982938930648961723502652I, 250305203317115565392855891471410869309542116217074791032949618511016253106993592379232896783903115296965037526108136117486629044712224173247297317949421042486864434354108786573913799174050164I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``125976336306281899296801606809415731614324038760388648473466385844255962658398273331499617154135/138041134485122513306128830863765695324239867820243640292687885002252930739945411735813365644270 * 120424521120208697320535782131643304726462864800258151588097442879788882733757191986431207821150/503856390473205420497457192366610401555116574215835617640115720883828379309333186131267836761245`` ( ) =
        BigFraction( 125976336306281899296801606809415731614324038760388648473466385844255962658398273331499617154135I, 138041134485122513306128830863765695324239867820243640292687885002252930739945411735813365644270I ) *
        BigFraction( 120424521120208697320535782131643304726462864800258151588097442879788882733757191986431207821150I, 503856390473205420497457192366610401555116574215835617640115720883828379309333186131267836761245I )
            |> should equal (
                BigFraction( 15170639972162358294379433849220966523822510021605992441238013739913896783051688829286319181670270675693808429289989471475573922549335137030376583252832379187345413714332250337203717062955250I, 69552907758500151352131475446490574024872687336752293211611694638477360799835951135004032395023941172582001671836671792594139596400206823662895588441096168060928652273950909049314229592316150I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``531283890671005604755979642921716359507178058222547150333032263531392215115695397293788502175689/671277048622545460210023099710428179637390272920144943565721693877910948339022141554034326464741 / 39895690811033689186848587079209771608874397337781201237363237059065338080665276704993136483958/813496631228334907489642008929253968721423831353024131889414803198282958670673092018652231416136`` ( ) =
        BigFraction( 531283890671005604755979642921716359507178058222547150333032263531392215115695397293788502175689I, 671277048622545460210023099710428179637390272920144943565721693877910948339022141554034326464741I ) /
        BigFraction( 39895690811033689186848587079209771608874397337781201237363237059065338080665276704993136483958I, 813496631228334907489642008929253968721423831353024131889414803198282958670673092018652231416136I )
            |> should equal (
                BigFraction( 432197655286746046878208160519735940272860706990678021075523930288964662476685955326430838035659649007676012181801531816654627572549674597556229577111769760084690861625606716360925953541517704I, 26781061580388301902248997717048699046619672223620784502969813247330240255994974223084806520328447605930299324990681246241154481420796772823841272688515625453757589081487881748895584999124878I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``212969907216523866915704385937850436975003947982906538778714521772890849440328331889907595162641/225915632245281434524625473991245675912325113233982259740413438022539337408909902662648541633768 + 416644077340637153015555176077362438118333762494124243795192162101810330776460826615447832011369`` ( ) =
        BigFraction( 212969907216523866915704385937850436975003947982906538778714521772890849440328331889907595162641I, 225915632245281434524625473991245675912325113233982259740413438022539337408909902662648541633768I ) + 416644077340637153015555176077362438118333762494124243795192162101810330776460826615447832011369I
            |> should equal (
                BigFraction( 94126410153661978682490337360198402575488161816430824320036723337463114797355791406965594189208890568955716883522283210447188062135162994643269810059739039618464903000300110535794768405471033I, 225915632245281434524625473991245675912325113233982259740413438022539337408909902662648541633768I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``147406511425050077455193800855452050406281982643957100918807934548082938559361782529071861843972/80018338885932575704900026129621894104094264310958956129439659606888158604252607530612865027453 - 702149507242091510529106277984730443920140995327054591210298048960725318957133712624587009480222`` ( ) =
        BigFraction( 147406511425050077455193800855452050406281982643957100918807934548082938559361782529071861843972I, 80018338885932575704900026129621894104094264310958956129439659606888158604252607530612865027453I ) - 702149507242091510529106277984730443920140995327054591210298048960725318957133712624587009480222I
            |> should equal (
                BigFraction( -56184837219088247797361071300246299943492583651771560007024869434842096437774208538157136427353889934331646317266512935067244039135509038890798694729353219541755330044273431737014355428690594I, 80018338885932575704900026129621894104094264310958956129439659606888158604252607530612865027453I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``768250416090716568679142413862268808236909057224460352429502667273845751842870320257388208933846/190994524678395875559372800536076283684737078061350812234922131782826953084493659030620480845074 * 462303070777619167903018531827092593612774184241422259630889024831324765727533887914616512249575`` ( ) =
        BigFraction( 768250416090716568679142413862268808236909057224460352429502667273845751842870320257388208933846I, 190994524678395875559372800536076283684737078061350812234922131782826953084493659030620480845074I ) * 462303070777619167903018531827092593612774184241422259630889024831324765727533887914616512249575I
            |> should equal (
                BigFraction( 355164526484921917501844160278902309129674572792658226156551552484976641041454062340823010283627876203104481041989700276743561184923659051976485885919511707210588508118812302641129509816615450I, 190994524678395875559372800536076283684737078061350812234922131782826953084493659030620480845074I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``818462773174337911964636899465586356391512254541827708373051832248631506105706873289184596260090/171857842796313716054091757396641548544243030983232015411666411512537754154321407820084688195451 / 293639326128466603914822120609965031697331738772402644955467754512170549688736846945256510868167`` ( ) =
        BigFraction( 818462773174337911964636899465586356391512254541827708373051832248631506105706873289184596260090I, 171857842796313716054091757396641548544243030983232015411666411512537754154321407820084688195451I ) / 293639326128466603914822120609965031697331738772402644955467754512170549688736846945256510868167I
            |> should equal (
                BigFraction( 818462773174337911964636899465586356391512254541827708373051832248631506105706873289184596260090I, 50464221148601508286848683398258787735545275161860118442009171529563457603685036792013030388608466532401641229072759409752075932704764599541057264643723877654041358422067218555673632590108317I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``190327675625090131446704624787729537585483422842903208995703910759030512628174620403680042733034 + 497918388550032098246303951621182709400721163805523681920269695147955946572829253980390589306334/103899033788871946545816167816823846442767922441080919230632538321798884152918607430906665583391`` ( ) =
        190327675625090131446704624787729537585483422842903208995703910759030512628174620403680042733034I + BigFraction( 497918388550032098246303951621182709400721163805523681920269695147955946572829253980390589306334I, 103899033788871946545816167816823846442767922441080919230632538321798884152918607430906665583391I )
            |> should equal (
                BigFraction( 19774861600728699147061042511000810528528967574963858621872285492495492913214916221961259177542439860055471946263453086560253035955896043343702673864404310903009406892745905964450472266744628I, 103899033788871946545816167816823846442767922441080919230632538321798884152918607430906665583391I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``355665480600143624115376119538964723430731709886808656562095638121392924230849312880844308049510 - 252086329843388514620328665930159977923977083927840168762459198640536155961647255020380380724181/340519889991572543422820725912256169194108816070074771156176106141783584545049086295925815337264`` ( ) =
        355665480600143624115376119538964723430731709886808656562095638121392924230849312880844308049510I - BigFraction( 252086329843388514620328665930159977923977083927840168762459198640536155961647255020380380724181I, 340519889991572543422820725912256169194108816070074771156176106141783584545049086295925815337264I )
            |> should equal (
                BigFraction( 121111170327760685474209915637262814149731162691647400603264666554620115497693801917093291820083904854159025517753549890681117038417291952604962004330199813173947972618919007712361430279216459I, 340519889991572543422820725912256169194108816070074771156176106141783584545049086295925815337264I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``332497169325374361778195426739146473400909604707411577252749031116098964157054254298810081577743 * 600677069474343028894221306561355279666608896419920512802653700750541763968939728143204738941285/773180019219538087321288296682049026755867728814579025256972140609174155245646288966023500927978`` ( ) =
        332497169325374361778195426739146473400909604707411577252749031116098964157054254298810081577743I * BigFraction( 600677069474343028894221306561355279666608896419920512802653700750541763968939728143204738941285I, 773180019219538087321288296682049026755867728814579025256972140609174155245646288966023500927978I )
            |> should equal (
                BigFraction( 199723425278880293357224902224399856502559482182193469255787729235467651737241321480613298963625192107551020677610648263764123349999754710764792874679073968464482763724398475658760584239819755I, 773180019219538087321288296682049026755867728814579025256972140609174155245646288966023500927978I )
            )

    [<Test>][<CategoryAttribute( "Big Fraction Arithmetic" )>]
    let ``29253685575350600764223897545695512767656523499928911970667406777264284100377494809332082291891 / 776815082980384637098650337005369953865320377712915324683114983792206234910316315726065583512627/976377613067296751905727477045939058410388714998343191922256666722195983931846382304296151946141`` ( ) =
        29253685575350600764223897545695512767656523499928911970667406777264284100377494809332082291891I / BigFraction( 776815082980384637098650337005369953865320377712915324683114983792206234910316315726065583512627I, 976377613067296751905727477045939058410388714998343191922256666722195983931846382304296151946141I )
            |> should equal (
                BigFraction( 28562643695482029232781432831010608313257641701526814578259185976861278147624223991279422574561088479390801438947602330219902174417687760839522281509973489097970734595391126995955483273042631I, 776815082980384637098650337005369953865320377712915324683114983792206234910316315726065583512627I )
            )

    // BigFraction comparison operators
    // =
    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``52523/35819 = 52523/35819`` ( ) =
        ( BigFraction( 52523, 35819 ) = BigFraction( 52523, 35819 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``7656/79947 = 9243/442`` ( ) =
        ( BigFraction( 7656, 79947 ) = BigFraction( 9243, 442 ) ) |> should not' ( be True )

    // <>
    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``51406/45715 <> 3719/3858`` ( ) =
        ( BigFraction( 51406, 45715 ) <> BigFraction( 3719, 3858 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``42392/844395 <> 42392/844395`` ( ) =
        ( BigFraction( 42392, 844395 ) <> BigFraction( 42392, 844395 ) ) |> should not' ( be True )

    // <
    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``1/3 < 1/2`` ( ) =
        ( BigFraction( 1, 3 ) < BigFraction( 1, 2 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``2/3 < 1/4`` ( ) =
        ( BigFraction( 2, 3 ) < BigFraction( 1, 4 ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``4/5 < 4/5`` ( ) =
        ( BigFraction( 4, 5 ) < BigFraction( 4, 5 ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``4/2 < 0/1`` ( ) =
        ( BigFraction( 4, 2 ) < BigFraction.Zero ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``5/10 < 2/3`` ( ) =
        ( BigFraction.op_LessThan( BigFraction( 5, 10 ) , BigFraction( 2, 3 ) ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``2/4 < 1/4`` ( ) =
        ( BigFraction.op_LessThan( BigFraction( 2, 4 ) , BigFraction( 1, 4 ) ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``8/9 < 8/9`` ( ) =
        ( BigFraction.op_LessThan( BigFraction( 8, 9 ) , BigFraction( 8, 9 ) ) ) |> should not' ( be True )

    // <=
    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``2/4 <= 4/6`` ( ) =
        ( BigFraction( 2, 4 ) <= BigFraction( 4, 6 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``5/6 <= 1/2`` ( ) =
        ( BigFraction( 5, 6 ) <= BigFraction( 1, 2 ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``88/89 <= 88/89`` ( ) =
        ( BigFraction( 88, 89 ) <= BigFraction( 88, 89 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``4/3 <= 0/1`` ( ) =
        ( BigFraction( 4, 3 ) <= BigFraction.Zero ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``10/4 <= 20/3`` ( ) =
        ( BigFraction.op_LessThanOrEqual( BigFraction( 20, 4 ) , BigFraction( 20, 3 ) ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``7/6 <= 2/4`` ( ) =
        ( BigFraction.op_LessThanOrEqual( BigFraction( 7, 6 ) , BigFraction( 2, 4 ) ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``3/2 <= 3/2`` ( ) =
        ( BigFraction.op_LessThanOrEqual( BigFraction( 3, 2 ) , BigFraction( 3, 2 ) ) ) |> should be True

    // >
    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``2/3 > 1/2`` ( ) =
        ( BigFraction( 2, 3 ) > BigFraction( 1, 2 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``8/4 > 16/3`` ( ) =
        ( BigFraction( 8, 4 ) > BigFraction( 16, 3 ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``7/9 > 7/9`` ( ) =
        ( BigFraction( 7, 9 ) > BigFraction( 7, 9 ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``6/9 > 0/1`` ( ) =
        ( BigFraction( 6, 9 ) > BigFraction.Zero ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``2/2 > 1/3`` ( ) =
        ( BigFraction.op_GreaterThan( BigFraction( 2, 2 ) , BigFraction( 1, 3 ) ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``1/9 > 4/6`` ( ) =
        ( BigFraction.op_GreaterThan( BigFraction( 1, 9 ) , BigFraction( 4, 6 ) ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``6/8 > 6/8`` ( ) =
        ( BigFraction.op_GreaterThan( BigFraction( 6, 8 ) , BigFraction( 6, 8 ) ) ) |> should not' ( be True )

    // >=
    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``5/8 >= 2/4`` ( ) =
        ( BigFraction( 5, 8 ) >= BigFraction( 2, 4 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``9/9 >= 3/2`` ( ) =
        ( BigFraction( 9, 9 ) >= BigFraction( 3, 2 ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``8/7 >= 8/7`` ( ) =
        ( BigFraction( 8, 7 ) >= BigFraction( 8, 7 ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``5/6 >= 0/1`` ( ) =
        ( BigFraction( 5, 6 ) >= BigFraction.Zero ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``3/8 >= 1/9`` ( ) =
        ( BigFraction.op_GreaterThanOrEqual( BigFraction( 3, 8 ) , BigFraction( 1, 9 ) ) ) |> should be True

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``4/31 >= 9/12`` ( ) =
        ( BigFraction.op_GreaterThanOrEqual( BigFraction( 4, 31 ) , BigFraction( 9, 12 ) ) ) |> should not' ( be True )

    [<Test>][<CategoryAttribute( "BigFraction Comparison Operators" )>]
    let ``9/9 >= 9/9`` ( ) =
        ( BigFraction.op_GreaterThanOrEqual( BigFraction( 9, 9 ) , BigFraction( 9, 9 ) ) ) |> should be True

    // ToString
    [<Test>]
    let ``BigFraction( 684398641532, 635452638442653 ).ToString( )`` ( ) =
        ( BigFraction( 684398641532I, 635452638442653I ).ToString( ) ) |> should equal "684398641532/635452638442653"

    // BigFraction functions
    // toBigDecimal
    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.toBigDecimal( BigFraction( 2478569730271I, 9060609724029I ) )`` ( ) =
        BigFraction.toBigDecimal( BigFraction( 2478569730271I, 9060609724029I ) ) |> should equal ( BigDecimal( "0.2735544081208752571323636693418582404431887558726" ) )

    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.toBigDecimal( BigFraction.Zero )`` ( ) =
        BigFraction.toBigDecimal( BigFraction.Zero ) |> should equal ( BigDecimal.Zero )

    // gcd
    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.gcd( 2I, 4I )`` ( ) =
        ( BigFraction.gcd 2I 4I ) |> should equal 2I

    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.gcd( 3319I, 5527I )`` ( ) =
        ( BigFraction.gcd 3319I 5527I ) |> should equal 1I

    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.gcd( 127144272669033402721615502794369798167731115826745846187558635513356185563153245280362492900422I, 842771202850740534882081196824012306408634167772516449266913527966436340995251125919666690706424I )`` ( ) =
        ( BigFraction.gcd 127144272669033402721615502794369798167731115826745846187558635513356185563153245280362492900422I 842771202850740534882081196824012306408634167772516449266913527966436340995251125919666690706424I )
            |> should equal 2I

    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.gcd( 0I, 44I )`` ( ) =
        ( BigFraction.gcd 0I 44I ) |> should equal 44I

    // simplify
    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.simplify( BigFraction( 2, 4 ) )`` ( ) =
        BigFraction.simplify( BigFraction( 2, 4 ) ) |> should equal ( BigFraction( 1, 2 ) )

    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.simplify( BigFraction( 6317, 7919 ) )`` ( ) =
        BigFraction.simplify( BigFraction( 6317, 7919 ) ) |> should equal ( BigFraction( 6317, 7919 ) )

    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.simplify( BigFraction( 403708216835541711289950147918579473359341596932879404004875063417540143391441966745655355230095, 43437383461010621228612831817598771457189363744116078043717025840549581716424762242854234621504 ) )`` ( ) =
        BigFraction.simplify( BigFraction( 403708216835541711289950147918579473359341596932879404004875063417540143391441966745655355230095I, 43437383461010621228612831817598771457189363744116078043717025840549581716424762242854234621504I ) )
            |> should equal (
                BigFraction( 57672602405077387327135735416939924765620228133268486286410723345362877627348852392236479318585I, 6205340494430088746944690259656967351027051963445154006245289405792797388060680320407747803072I )
            )

    [<Test>][<CategoryAttribute( "BigFraction Functions" )>]
    let ``BigFraction.simplify( BigFraction.Zero )`` ( ) =
        BigFraction.simplify( BigFraction.Zero ) |> should equal ( BigFraction.Zero )